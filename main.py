import telebot
import os
import time
import threading
from flask import Flask, request
from telebot import types

TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

bot.set_my_commands([
    types.BotCommand("start", "Boshlash / –ù–∞—á–∞—Ç—å"),
])

app = Flask(__name__)
user_data = {}

translations = {
    "uz": {
        "start": "Assalomu alaykum! Tilni tanlang:",
        "choose_product": "Iltimos, kredit turini tanlang:",
        "product_options": ["üü¢ Mikrokredit", "‚úçÔ∏è Mustaqil kiritish"],
        "client_type": "Iltimos, mijoz turini tanlang:",
        "months": "Iltimos, muddatni tanlang:",
        "salary": "Iltimos, oylik maoshingizni kiriting:",
        "other_loans": "Sizda boshqa kreditlar mavjudmi?",
        "other_loans_amount": "Har oy boshqa kreditlarga qancha to'laysiz?",
        "result_limit": "Siz maksimal {limit} so'm kredit olishingiz mumkin.",
        "menu": "Quyidagilardan birini tanlang:",
        "new_calc": "üîÅ Yangi hisob",
        "change_lang": "üåê Tilni o'zgartirish",
        "client_types": ["Davlat xizmatchisi", "Xususiy sektor", "Pensioner"],
        "terms": {
            "Davlat xizmatchisi": ["24 oy - 25%", "36 oy - 26%", "48 oy - 27%"],
            "Xususiy sektor": ["24 oy - 30%", "36 oy - 31%", "48 oy - 32%"],
            "Pensioner": ["24 oy - 30%", "36 oy - 31%", "48 oy - 32%"]
        },
        "months_error": "Faqat tugmalardan birini tanlang yoki to'g'ri son kiriting.",
        "amount_error": "Iltimos, to'g'ri summa kiriting.",
    },
    "ru": {
        "start": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "choose_product": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:",
        "product_options": ["üü¢ –ú–∏–∫—Ä–æ–∫—Ä–µ–¥–∏—Ç", "‚úçÔ∏è –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥"],
        "client_type": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞:",
        "months": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫:",
        "salary": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞—Ä–ø–ª–∞—Ç—É:",
        "other_loans": "–£ –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫—Ä–µ–¥–∏—Ç—ã?",
        "other_loans_amount": "–°–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ –¥—Ä—É–≥–∏–µ –∫—Ä–µ–¥–∏—Ç—ã –≤ –º–µ—Å—è—Ü?",
        "result_limit": "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º {limit} —Å—É–º –∫—Ä–µ–¥–∏—Ç–∞.",
        "menu": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "new_calc": "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç",
        "change_lang": "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "client_types": ["–ì–æ—Å—Å–ª—É–∂–∞—â–∏–π", "–ß–∞—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä"],
        "terms": {
            "–ì–æ—Å—Å–ª—É–∂–∞—â–∏–π": ["24 –º–µ—Å - 25%", "36 –º–µ—Å - 26%", "48 –º–µ—Å - 27%"],
            "–ß–∞—Å—Ç–Ω—ã–π —Å–µ–∫—Ç–æ—Ä": ["24 –º–µ—Å - 30%", "36 –º–µ—Å - 31%", "48 –º–µ—Å - 32%"],
            "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä": ["24 –º–µ—Å - 30%", "36 –º–µ—Å - 31%", "48 –º–µ—Å - 32%"]
        },
        "months_error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
        "amount_error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.",
    }
}

def format_number(n):
    return f"{n:,.0f}".replace(",", " ")

def send_keyboard(chat_id, text, buttons):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for row in buttons:
        markup.add(*row)
    bot.send_message(chat_id, text, reply_markup=markup)

def parse_months_and_rate(text):
    import re
    match = re.search(r"(\d+)[^\d]+(\d+)%", text)
    if match:
        return int(match.group(1)), float(match.group(2))
    return None, None

def loading_sequence(chat_id):
    for msg in [
        "üõ†Ô∏è Yuklanmoqda... / –ó–∞–≥—Ä—É–∑–∫–∞...",
        "‚è≥ Ma ºlumotlar tekshirilmoqda... / –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
        "ü§ñ Bot ishga tushirilmoqda... / –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...",
        "üöÄ Tayyorlanmoqda... / –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."
    ]:
        bot.send_message(chat_id, msg)
        time.sleep(1.5)
    send_keyboard(chat_id, translations["uz"]["start"], [["üá∫üáø O'zbek", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"]])

@bot.message_handler(commands=["start"])
def start(message):
    if message.message_thread_id is None:
        chat_id = message.chat.id
        user_data[chat_id] = {}
        threading.Thread(target=loading_sequence, args=(chat_id,)).start()

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    if message.message_thread_id is not None:
        return
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_data:
        user_data[chat_id] = {}
    data = user_data[chat_id]
    lang = data.get("lang", "uz")

    if text in ["üá∫üáø O'zbek", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", translations["uz"]["change_lang"], translations["ru"]["change_lang"]]:
        lang = "uz" if "O'zbek" in text else "ru"
        user_data[chat_id] = {"lang": lang}
        send_keyboard(chat_id, translations[lang]["choose_product"], [[p] for p in translations[lang]["product_options"]])
        return

    if text in [translations["uz"]["new_calc"], translations["ru"]["new_calc"]]:
        lang = user_data[chat_id].get("lang", "uz")
        user_data[chat_id].clear()
        user_data[chat_id]["lang"] = lang
        send_keyboard(chat_id, translations[lang]["choose_product"], [[p] for p in translations[lang]["product_options"]])
        return

    if "product" not in data:
        if text in translations[lang]["product_options"]:
            data["product"] = text
            send_keyboard(chat_id, translations[lang]["client_type"], [[t] for t in translations[lang]["client_types"]])
        return

    if "client_type" not in data:
        if text in translations[lang]["client_types"]:
            data["client_type"] = text
            send_keyboard(chat_id, translations[lang]["months"], [[t] for t in translations[lang]["terms"][text]])
        return

    if "months" not in data:
        months, rate = parse_months_and_rate(text)
        if not months:
            bot.send_message(chat_id, translations[lang]["months_error"])
        else:
            data["months"] = months
            data["rate"] = rate
            bot.send_message(chat_id, translations[lang]["salary"])
        return

    if "salary" not in data:
        try:
            data["salary"] = float(text)
            send_keyboard(chat_id, translations[lang]["other_loans"],
                          [["‚úÖ Ha", "‚ùå Yo'q"]] if lang == "uz" else [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]])
        except:
            bot.send_message(chat_id, translations[lang]["amount_error"])
        return

    if "has_other_loans" not in data:
        if text.lower() in ["yo'q", "–Ω–µ—Ç", "no", "yoq", "‚ùå yo'q", "‚ùå –Ω–µ—Ç"]:
            data["has_other_loans"] = False
            data["other_loans_amount"] = 0
            calculate_diff_and_send(chat_id)
        elif text.lower() in ["ha", "–¥–∞", "yes", "‚úÖ ha", "‚úÖ –¥–∞"]:
            data["has_other_loans"] = True
            bot.send_message(chat_id, translations[lang]["other_loans_amount"])
        return

    if data.get("has_other_loans") and "other_loans_amount" not in data:
        try:
            data["other_loans_amount"] = float(text)
            calculate_diff_and_send(chat_id)
        except:
            bot.send_message(chat_id, translations[lang]["amount_error"])

def calculate_diff_and_send(chat_id):
    data = user_data[chat_id]
    lang = data["lang"]
    salary = data["salary"]
    months = data["months"]
    rate = data["rate"] / 100
    other = data.get("other_loans_amount", 0)

    limit_monthly = (salary * 0.5) - other
    monthly_rate = rate / 12

    main_limit = limit_monthly * months / (1 + monthly_rate * (months + 1) / 2)
    total = 0
    result = ""

    for i in range(1, months + 1):
        principal = main_limit / months
        interest = (main_limit - principal * (i - 1)) * monthly_rate
        payment = principal + interest
        total += payment
        result += f"{i}-oy: {format_number(payment)} so'm\n" if lang == "uz" else f"{i}-–º–µ—Å: {format_number(payment)} —Å—É–º\n"

    bot.send_message(chat_id, translations[lang]["result_limit"].format(limit=format_number(main_limit)))
    bot.send_message(chat_id, result)
    send_keyboard(chat_id, translations[lang]["menu"], [[translations[lang]["new_calc"]]])
    user_data.pop(chat_id)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def index():
    return "Bot ishlayapti", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
